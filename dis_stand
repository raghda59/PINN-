import torch                        #imported what i need
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt


df_combinations = pd.read_excel('discharge2.xlsx')

# to check column names 
print("Column Names:", df_combinations.columns)

# Extract input 
X = df_combinations[['T', 't', 'Capacity_Fade']].values

# Normalize input 
scaler_X = MinMaxScaler()
X_normalized = scaler_X.fit_transform(X)

# Convert numpy arrays to PyTorch tensors
X_tensor = torch.tensor(X_normalized, dtype=torch.float32, requires_grad=True)

# Define the PINN 
class PINNModel(nn.Module):
    def __init__(self):
        super(PINNModel, self).__init__()
        self.dense1 = nn.Linear(3, 100)
        self.activation1 = nn.Tanh()
        self.dense2 = nn.Linear(100, 100)
        self.activation2 = nn.Tanh()
        self.dense3 = nn.Linear(100, 2)  # 2 outputs: SOC and SOH

    def forward(self, x):
        x = self.activation1(self.dense1(x))
        x = self.activation2(self.dense2(x))
        return self.dense3(x)

model = PINNModel()

# Define loss function with the use of the equations of soc and soh
def loss_fn(X, model):
    predictions = model(X)
    SOC_pred, SOH_pred = predictions[:, 0], predictions[:, 1]
    
    # Physics equation residuals 
    physics_residuals = torch.stack([
        SOC_pred - (0.019 * X[:, 2]**0.823 + 0.5195) * (3.258e-9 * X[:, 0]**5.087 + 0.295) * X[:, 1]**0.8,
        SOH_pred - 0.2 * SOC_pred  
    ], dim=1)
    

    data_loss = 0.5 * torch.sum((predictions - X[:, :2])**2)
    
    # Combined loss
    total_loss = data_loss + torch.sum(physics_residuals**2)
    
    return total_loss, SOC_pred, SOH_pred  # Return SOC and SOH predictions

# the optimizer
optimizer = optim.Adam(model.parameters(), lr=0.00001)

# Training the PINN model
num_epochs = 5000

for epoch in range(num_epochs):
    loss, SOC_pred, SOH_pred = loss_fn(X_tensor, model)

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if epoch % 100 == 0:
        print(f'Epoch {epoch}, Loss: {loss.item()}')

# Save the model
torch.save(model.state_dict(), 'pinn_model.pth')


# predict SOC and SOH 
with torch.no_grad():
    predictions = model(X_tensor).numpy()


predictions[:, 1] *= 0.2  

# Plot 
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.scatter(df_combinations['Capacity_Fade'], predictions[:, 0], label='Predicted SOC')
plt.xlabel('Cfade(Capacity_Fade)')
plt.ylabel('State of Charge (SOC)')
plt.legend()

plt.subplot(1, 2, 2)
plt.scatter(df_combinations['Capacity_Fade'], predictions[:, 1], label='Predicted SOH')
plt.xlabel('Cfade (Capacity_Fade)')
plt.ylabel('State of Health (SOH)')
plt.legend()

plt.tight_layout()
plt.show()

